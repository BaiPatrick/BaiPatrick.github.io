<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OpenGL</title>
    <url>/undefined/22236.html</url>
    <content><![CDATA[<h2 id="一、什么是OpenGL"><a href="#一、什么是OpenGL" class="headerlink" title="一、什么是OpenGL"></a>一、什么是OpenGL</h2><ol>
<li>OpenGL是一种图形接口，是跨平台的API</li>
<li>允许我们访问GPU，也就是显卡，图像处理单元</li>
<li>允许访问和操作GPU的许多接口中的一种，其他接口比如：Direct3D、Vulcan、Metal等等</li>
<li>一定程度上允许我们控制显卡</li>
<li>关于一些对OpenGL的误解<ol>
<li>不是一个类库，因为本身没有代码</li>
<li>OpenGL核心本身是一种规范，类似于C++规范</li>
<li>没有确定任何代码和类似的事情</li>
<li>只是一种能利用这种API做什么的规范，没有任何具体的实现</li>
</ol>
</li>
<li>如何调用OpenGL<ol>
<li>使用显卡不同，对OpenGL调用不同</li>
</ol>
</li>
<li>传统OpenGL和现代OpenGL的区别<ol>
<li>现代OpenGL更像一个循环，一个低级的法则，能给更多的控制权</li>
<li>最大的区别：着色器<ol>
<li>着色器：程序，在GPU上运行的代码</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>​<span id="more"></span></p>
<h2 id="二、OpenGL"><a href="#二、OpenGL" class="headerlink" title="二、OpenGL"></a>二、OpenGL</h2><h3 id="1-OpenGL"><a href="#1-OpenGL" class="headerlink" title="1.OpenGL"></a>1.OpenGL</h3><ol>
<li><p>对扩展的支持，当显卡公司提出一个新特性或者渲染上的大优化，通常会以扩展的方式在驱动中实现</p>
</li>
<li><p>使用扩展的代码大多如下：</p>
<p>if(GL_ARB_extension_name)</p>
<p> {</p>
<p>  &#x2F;&#x2F; 使用硬件支持的全新的现代特性</p>
<p> }</p>
<p>else</p>
<p> { </p>
<p>   &#x2F;&#x2F; 不支持此扩展: 用旧的方式去做</p>
<p> }</p>
</li>
<li><p>状态机：本质上是个大状态机</p>
<ol>
<li>OpenGL上下文：<ol>
<li>OpenGL的状态</li>
<li>更改OpenGL状态：设置选项，操作缓冲</li>
<li>使用当前的OpenGL上下文进行渲染</li>
</ol>
</li>
<li>状态设置函数：<ol>
<li>改变上下文</li>
</ol>
</li>
<li>状态使用函数：<ol>
<li>根据当前OpenGL的状态进行一些操作</li>
</ol>
</li>
</ol>
</li>
<li><p>对象</p>
<ol>
<li><p>一些选项的集合，代表OpenGL状态的一个子集</p>
</li>
<li><p>当我们使用一个对象时，通常看起来像如下一样</p>
<p>&#x2F;&#x2F; OpenGL的状态 </p>
<p>struct OpenGL_Context {   </p>
<p> …    </p>
<p>object* object_Window_Target;</p>
<p> … </p>
<p> };</p>
</li>
<li><p>使用OpenGL常见工作流</p>
<p>&#x2F;&#x2F; 创建对象 </p>
<p>unsigned int objectId &#x3D; 0; </p>
<p>glGenObject(1, &amp;objectId); </p>
<p>&#x2F;&#x2F; 绑定对象至上下文 </p>
<p>glBindObject(GL_WINDOW_TARGET, objectId);</p>
<p> &#x2F;&#x2F; 设置当前绑定到 GL_WINDOW_TARGET 的对象的一些选项</p>
<p> glSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_WIDTH, 800); </p>
<p>glSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_HEIGHT, 600); </p>
<p>&#x2F;&#x2F; 将上下文对象设回默认 </p>
<p>glBindObject(GL_WINDOW_TARGET, 0);</p>
</li>
<li><p>使用对象的好处</p>
<ol>
<li>在程序中不止可以定义一个对象，并设置它们的选项，每个对象都可以是不同的设置</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="2-visual-studio配置GLFW和GLAD"><a href="#2-visual-studio配置GLFW和GLAD" class="headerlink" title="2.visual studio配置GLFW和GLAD"></a>2.visual studio配置GLFW和GLAD</h3><ol>
<li>GLFW<ol>
<li>使用Cmake进行编译<ol>
<li>选择源代码目录和存放编译结果的目标文件目录<ol>
<li>源代码目录：GLFW的源代码根目录</li>
<li>目标文件目录：新建build文件夹</li>
</ol>
</li>
</ol>
</li>
<li>编译<ol>
<li>build文件夹中选择GLFW.sln文件，选择生成</li>
<li>build&#x2F;src&#x2F;Debug中出现编译的库文件glfw3.lib</li>
<li>指定IDE库和头文件位置<ol>
<li>新建文件夹</li>
<li>在新建文件夹中创建libs和include文件夹</li>
<li>将glfw文件夹中include文件夹中的glfw复制进新建的include中</li>
<li>将build\src\Debug中glfw3.lib放入libs文件夹中</li>
</ol>
</li>
</ol>
</li>
<li>链接<ol>
<li>vc++目录<ol>
<li>包含目录：新建文件夹\include</li>
<li>库目录：新建文件夹\libs</li>
</ol>
</li>
<li>链接器<ol>
<li>输入：添加opengl32.lib和glfw.lib依赖项</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>GLAD<ol>
<li>开源的库，可以简化调用函数过程</li>
<li>打开GLAD在线服务，选择相应信息，生成库文件</li>
<li>将两个头文件(glad和KHR)复制进新建文件夹\include中</li>
<li>将glad.c添加到工程中</li>
<li>GLAD需要置于在其他依赖与OpenGL的头文件(如GLFW)之前</li>
</ol>
</li>
</ol>
<h3 id="3-visual-studio-code配置GLFW"><a href="#3-visual-studio-code配置GLFW" class="headerlink" title="3.visual studio code配置GLFW"></a>3.visual studio code配置GLFW</h3><ol>
<li><p>主要步骤分为：</p>
<ol>
<li>配置编译环境</li>
<li>配置OpenGL环境</li>
</ol>
</li>
<li><p>OpenGL环境配置</p>
<ol>
<li><p>安装MinGW</p>
<ol>
<li>从官网下载MinGW，不要下载MinGW-w64，因为后面可能会出现问题</li>
<li>将下载完成的压缩包解压到指定目录</li>
<li>将MinGW文件下的bin文件添加到系统环境变量中</li>
</ol>
</li>
<li><p>验证编译器环境</p>
<ol>
<li>按键<code>ctrl+shift+p</code>，输入 <code>create C++ project</code> 创建一个C++文件工程</li>
<li>打开终端（快捷键F5），输入 <code>make run</code>命令，开始编译运行</li>
</ol>
</li>
<li><p>配置OpenGL环境</p>
<ol>
<li><p>下载GLFW，下载地址为：<a href="https://www.glfw.org/download.html">https://www.glfw.org/download.html</a></p>
<ol>
<li>安装32位</li>
<li>将解压包中<code>D:\Download\glfw-3.3.8.bin.WIN32\include</code>下的GLFW文件，复制到vscode创建的C++工程下的include文件夹下</li>
<li>将解压包中<code>D:\Download\glfw-3.3.8.bin.WIN32\lib-mingw</code>路径下的<code>libglfw3.a</code>、<code>libglfw3dll.a</code>两个文件，复制到vscode创建的C++工程下的lib文件夹下</li>
<li>将解压包中<code>D:\Download\glfw-3.3.8.bin.WIN32\lib-mingw</code>路径下的<code>glfw3.dll</code>文件，复制到vscode创建的C++工程下的output文件夹下</li>
</ol>
</li>
<li><p>glad配置</p>
<ol>
<li><p>glad生成静态库的地址为：<a href="https://glad.dav1d.de/">https://glad.dav1d.de/</a></p>
</li>
<li><p>下载生成结果</p>
</li>
<li><p>在解压目录中使用cmd</p>
</li>
<li><p>执行命令：</p>
<p><code> gcc ./src/glad.c -c -I ./include/ // 生成 .o文件</code><br><code> ar -rc libglad.a glad.o           // 生成我们所需要的 .a文件</code></p>
<p>此时在glad文件路径下生成<code>glad.o</code>和<code>libglad.a</code>文件</p>
</li>
<li><p>将<code>glad\include</code>路径下的两个文件夹复制到vscode创建的C++工程下的include文件夹下</p>
</li>
<li><p>将<code>glad</code>路径下生成的<code>libglad.a</code>文件复制到vscode创建的C++工程下的lib文件夹下</p>
</li>
</ol>
</li>
<li><p>修改Makefile文件</p>
<ol>
<li>添加：<code>LIBRARIES	:= -lglad -lglfw3dll    # add</code></li>
<li>在此语句<code>$(MAIN): $(OBJECTS)  $(CXX) $(CXXFLAGS) $(INCLUDES) -o $(OUTPUTMAIN) $(OBJECTS) $(LFLAGS) $(LIBS) $(LIBRARIES)</code>最后添加： <code>$(LIBRARIES)</code></li>
</ol>
</li>
</ol>
</li>
<li><p>添加源文件</p>
<ol>
<li><p>在<code>main.cpp</code>文件中添加如下代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glad/glad.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">framebuffer_size_callback</span><span class="params">(GLFWwindow* window, <span class="type">int</span> width, <span class="type">int</span> height)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processInput</span><span class="params">(GLFWwindow *window)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// settings</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> SCR_WIDTH = <span class="number">800</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> SCR_HEIGHT = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// glfw: initialize and configure</span></span><br><span class="line">    <span class="comment">// ------------------------------</span></span><br><span class="line">    <span class="built_in">glfwInit</span>();</span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// glfw window creation</span></span><br><span class="line">    <span class="comment">// --------------------</span></span><br><span class="line">    GLFWwindow* window = <span class="built_in">glfwCreateWindow</span>(SCR_WIDTH, SCR_HEIGHT, <span class="string">&quot;LearnOpenGL&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (window == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">glfwTerminate</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line">    <span class="built_in">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// glad: load all OpenGL function pointers</span></span><br><span class="line">    <span class="comment">// ---------------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// render loop</span></span><br><span class="line">    <span class="comment">// -----------</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        <span class="comment">// -----</span></span><br><span class="line">        <span class="built_in">processInput</span>(window);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// render</span></span><br><span class="line">        <span class="comment">// ------</span></span><br><span class="line">        <span class="built_in">glClearColor</span>(<span class="number">0.2f</span>, <span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">1.0f</span>);</span><br><span class="line">        <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)</span></span><br><span class="line">        <span class="comment">// -------------------------------------------------------------------------------</span></span><br><span class="line">        <span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">        <span class="built_in">glfwPollEvents</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// glfw: terminate, clearing all previously allocated GLFW resources.</span></span><br><span class="line">    <span class="comment">// ------------------------------------------------------------------</span></span><br><span class="line">    <span class="built_in">glfwTerminate</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly</span></span><br><span class="line"><span class="comment">// ---------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processInput</span><span class="params">(GLFWwindow *window)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class="line">        <span class="built_in">glfwSetWindowShouldClose</span>(window, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// glfw: whenever the window size changed (by OS or user resize) this callback function executes</span></span><br><span class="line"><span class="comment">// ---------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">framebuffer_size_callback</span><span class="params">(GLFWwindow* window, <span class="type">int</span> width, <span class="type">int</span> height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// make sure the viewport matches the new window dimensions; note that width and </span></span><br><span class="line">    <span class="comment">// height will be significantly larger than specified on retina displays.</span></span><br><span class="line">    <span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>测试</p>
<ol>
<li>在vscode打开终端，执行<code>make run</code>进行测试</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次对OpenGL进行了详细的环境配置，包括在visual studio的配置以及在visual studio code中的配置，其中visual studio有官方文档可以进行学习操作，官方文档对配置环境描述很详细。在vscode配置中遇到一些问题：</p>
<ol>
<li>glfw版本选择错误，导致最后测试时发生错误，glfw版本选择时应该选择32位，选择64位会出现错误</li>
<li>其余问题都为操作失误，没有理解上的错误</li>
</ol>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
        <tag>OpenGL</tag>
      </tags>
  </entry>
</search>
